# 정렬 알고리즘 비교하기 

- 앞서 다룬 네 가지 정렬 알고리즘을 비교 
- 대부분의 프로그래밍 언어에서 지원하는 표준 정렬 라이브러리는 최악의 경우에도 O(N*logN)을 보장하도록 설계되어 있다

| 정렬 알고리즘 | 평균 시간 복잡도  | 공간 복잡도 | 특징                                                         |
| ------------- | ----------------- | ----------- | ------------------------------------------------------------ |
| 선택 정렬     | O(N<sup>2</sup>)  | O(N)        | 아이디어가 매우 간단                                         |
| 삽입 정렬     | O(N <sup>2</sup>) | O(N)        | 데이터가 거의 정렬되어 있을때는 가장 빠름                    |
| 퀵 정렬       | O(N*logN)         | O(N)        | 대부분의 경우에 가장 적합, 충분히 빠름                       |
| 계수 정렬     | O(N+K)            | O(N+K)      | 데이터의 크기가 한정되어 있을때만 사용 가능하지만, 매우 빠르게 동작 |



## 선택 정렬과 기본 정렬 라이브러리 수행 시간 비교 

![image-20201111184321676](C:\Users\scoji\AppData\Roaming\Typora\typora-user-images\image-20201111184321676.png)



## <문제> 두 배열의 원소 교체 

- 동빈이는 두 개의 배열 A , B를 갖고 있다. 두 배열은 N개의 원소로 구성되어 있으며, 배열의 원소는 모두 자연수이다. 
- 동빈이는 __최대 K 번의 바꿔치기__ 연산을 수행할 수 있는데, 바꿔치기 연산이란 배열 A에 있는 원소 하나와 배열 B에 있는 원소 하나를 골라서 두 원소를 서로 바꾸는 것이다. 
- 동빈이의 최종 목표는 배열 A의 모든 원소의 합이 최대가 되도록 하는 것
- N, K 그리고 배열 A, B의 정보가 주어졌을 때, 최대 K번의 바꿔치기 연산을 수행하여 만들 수 있는 __배열 A의 모든 원소의 합의 최댓값을 출력__ 하는 프로그램을 작성하세요  

### <예시> 

- N = 5 , K= 3 
- 배열 A = [1,2,3,4,5] 
- 배열 B = [5,5,6,6,5]

이 경우, 세번의 연산을 수행한다 

	1. A의 1과 B의 6을 바꾸기 

   	2. A의 2와 B의 6을 바꾸기 
   	3. A의 3과 B의 5를 바꾸기 

- 세 번의 연산 이후 배열 A와 배열 B의 상태는 다음과 같다 
  - A = [6,6,5,4,5]
  - B = [3,5,1,2,5]
- 이때 배열 A의 모든 원소의 합은 26이며, 이보다 더 합을 크게 만들 수는 없다 

![image-20201111185310265](C:\Users\scoji\AppData\Roaming\Typora\typora-user-images\image-20201111185310265.png)



## 문제 해결 아이디어 

- __핵심 아이디어__ : 매번 배열 A에서 가장 작은 원소를 골라서 B의 가장 큰 원소와 교체 
- A와 B가 주어지면 A에 대해 오름차순 , B에 대해 내림차순 정렬 수행 
- 두 배열 원소를 첫번째 인덱스부터 차례로 확인하면서, A의 원소가 B의 원소보다 작을 때에만 교체를 수행 
- 이 문제에서는 두 배열의 원소가 최개 100,000개 까지 입력될 수 있으므로, 최악의 경우 O (N*logN)을 보장하는 정렬 알고리즘을 이용해야 한다.



```python
n, k = map(int, input().split())

a = list(map(int, input().split()))
b = list(map(int, input().split()))

a.sort()
b.sort(reverse= True)

for i in range(k):
    if a[i] > b[i]:
        a[i], b[i] = b[i], a[i]
    else: # A의 원소가 B의 원소보다 크거나 같을 때, 반복문을 탈출
        break

print(sum(a)) # 배열 A의 모든 원소의 합을 출력
```

